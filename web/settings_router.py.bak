"""
Router per le impostazioni del servizio.
"""

from fastapi import APIRouter, Request, Depends, HTTPException, status, Form
from fastapi.responses import RedirectResponse
from typing import Optional

from core.auth import get_api_key
from core.config import get_settings, LogServiceSettings

# Inizializza il router
router = settings_router = APIRouter()

@settings_router.post("/retention")
async def update_retention_settings(
    request: Request,
    retention_days: int = Form(...),
    enable_compression: bool = Form(False),
    compress_after_days: int = Form(1),
    archive_retention_days: int = Form(365),
    api_key: str = Depends(get_api_key)
):
    """
    Aggiorna le impostazioni di conservazione dei log.
    """
    import os
    import json
    from datetime import datetime
    
    # Verifica i valori
    if retention_days < 1:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Il periodo di conservazione deve essere almeno 1 giorno"
        )
    
    if compress_after_days < 1:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Il periodo prima della compressione deve essere almeno 1 giorno"
        )
    
    if archive_retention_days < 1:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Il periodo di conservazione degli archivi deve essere almeno 1 giorno"
        )
    
    # Carica le impostazioni correnti
    settings = get_settings()
    
    # Aggiorna le impostazioni in un file di configurazione specifico
    config_dir = os.path.join(os.path.dirname(os.path.dirname(__file__)), "config")
    os.makedirs(config_dir, exist_ok=True)
    
    config_file = os.path.join(config_dir, "retention_settings.json")
    
    # Carica la configurazione esistente o crea un nuovo oggetto
    config = {}
    if os.path.exists(config_file):
        try:
            with open(config_file, "r") as f:
                config = json.load(f)
        except Exception:
            config = {}
    
    # Aggiorna le impostazioni
    config.update({
        "retention_days": retention_days,
        "enable_log_compression": enable_compression,
        "compress_logs_older_than_days": compress_after_days,
        "compressed_logs_retention_days": archive_retention_days,
        "last_updated": datetime.now().isoformat()
    })
    
    # Salva le impostazioni
    with open(config_file, "w") as f:
        json.dump(config, f, indent=2)
    
    # Reindirizza alla pagina del logservice
    return RedirectResponse(url="/dashboard/logservice", status_code=status.HTTP_303_SEE_OTHER)
